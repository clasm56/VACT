---
title: "VACT"
subtitle: "Visual Analytics in Clinical Trials"
format: revealjs
editor: visual
server: shiny 
---

## Visual Analytics in Pre-Market Clinical Trials

An interactive review of how visual analytics is used for data exploration in pre-market clinical trials

![](~/Desktop/GitHub/DVCT/DVCT2/Images/MITTR-MedidataCover1200.jpeg)

## Course Content

-   Sources of data in Clinical Trials

-   Various Techniques for Visualizing types of Data

-   Interactive data exploration examples

## Clinical Trial Data

-Data flow/sources of data in clinical trials

## Data Analysis in Clinical Trials

-   AE Categorical

-Labs Continuous

## AE magnitudes {.smaller .scrollable transition="slide"}

::: panel-tabset
### BarChart(Vertical)

```{r}
#| echo: false
library(haven)
library(ggplot2)
library(forcats)
library(dplyr)

# Read the .xpt file
adae <- read_xpt("data/adae.xpt")

# Filter the top 15 most frequent AEDECOD
top_15 <- adae %>%
  count(AEDECOD, sort = TRUE) %>%
  slice_max(n, n = 15)

# Filter the original dataset to only include the top 15 AEDECOD
adae_top15 <- adae %>%
  filter(AEDECOD %in% top_15$AEDECOD)

# Plot the top 15 AEDECOD with enhancements
ggplot(adae_top15, aes(x = fct_infreq(AEDECOD))) +
  geom_bar(fill = "steelblue", color = "black", width = 0.8) +
  geom_text(stat = "count", aes(label = ..count..), vjust = -0.5, size = 3.5) +
  theme_minimal(base_size = 14) +
  labs(
    title = "Top 15 Adverse Events",
    subtitle = "Frequency of Adverse Events in Clinical Trials",
    x = "Adverse Event",
    y = "Count"
  ) +
  theme(
    plot.title = element_text(hjust = 0.5, face = "bold", size = 16),
    plot.subtitle = element_text(hjust = 0.5, size = 12),
    axis.text.x = element_text(angle = 45, hjust = 1, size = 10),
    axis.text.y = element_text(size = 10),
    axis.title.x = element_text(face = "bold"),
    axis.title.y = element_text(face = "bold"),
    panel.grid.major.x = element_blank(),  # Remove vertical grid lines
    panel.grid.minor = element_blank()
  ) +
  scale_y_continuous(expand = expansion(mult = c(0, 0.1)))  # Add space above bars
```

### Barchart(Horizontal)

```{r}
#| echo: false
library(haven)
library(ggplot2)
library(RColorBrewer)

# Read the .xpt file
adae <- read_xpt("data/adae.xpt")

# Enhanced horizontal bar chart
ggplot(adae, aes(x = AESEV, fill = AESEV)) +
  geom_bar(show.legend = FALSE) +
  coord_flip() +
  theme_minimal(base_size = 14) + # Increase base font size for readability
  scale_fill_brewer(palette = "Set2") + # Apply a visually appealing color palette
  labs(
    title = "Distribution of Adverse Event Severity",
    x = "Count", # Adjusted for horizontal bar chart
    y = "Severity"
  ) +
  theme(
    plot.title = element_text(hjust = 0.5, size = 16, face = "bold"), # Center and style title
    axis.text = element_text(size = 12), # Increase axis text size
    axis.title = element_text(size = 14) # Increase axis title size
  )

```

### Grouped Barchart

```{r}
library(haven)
library(ggplot2)
library(forcats)
library(dplyr)
library(RColorBrewer)

# Read the .xpt file
adae <- read_xpt("data/adae.xpt")

# Filter the top 15 most frequent AEDECOD
top_15 <- adae %>%
  count(AEDECOD, sort = TRUE) %>%
  slice_max(n, n = 15)

# Filter the original dataset to only include the top 15 AEDECOD
adae_top15 <- adae %>%
  filter(AEDECOD %in% top_15$AEDECOD)

# Enhanced grouped bar chart
ggplot(adae_top15, aes(x = fct_infreq(AEDECOD), fill = AESEV)) +
  geom_bar(position = position_dodge(width = 0.8), color = "black", size = 0.3) + # Add borders for better distinction
  theme_minimal(base_size = 14) + # Set a larger base font size
  scale_fill_brewer(palette = "Set2") + # Use a visually pleasing color palette
  labs(
    title = "Top 15 Adverse Events Grouped by Severity",
    x = "Adverse Event",
    y = "Count",
    fill = "Severity"
  ) +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1, size = 12), # Tilt x-axis labels and increase size
    axis.title = element_text(size = 14), # Larger axis titles
    plot.title = element_text(hjust = 0.5, size = 16, face = "bold"), # Center and style title
    legend.position = "top", # Move legend to the top for better layout
    legend.title = element_text(size = 12, face = "bold"), # Style legend title
    legend.text = element_text(size = 10) # Increase legend text size
  )

```
:::

:::

## Who is in my study (subdivisions)

```{r}
#| context: setup 
library(shiny)
library(dplyr)
library(haven)
library(ggplot2)

# Load dataset
adsl <- read_xpt("data/adsl.xpt")
```

```{r}
#| panel: sidebar
sliderInput(
        "mmse_range",
        "Select MMSE Range:",
        min = min(adsl$MMSETOT, na.rm = TRUE),
        max = max(adsl$MMSETOT, na.rm = TRUE),
        value = c(min(adsl$MMSETOT, na.rm = TRUE), max(adsl$MMSETOT, na.rm = TRUE))
      )
radioButtons(
        "stack_var",
        "Stack By:",
        choices = list(
          "None (Race Totals)" = "none",
          "Dose (TRT01A)" = "TRT01A",
          "Age Group (AGEGR1)" = "AGEGR1",
          "BMI Group (BMIBLGR1)" = "BMIBLGR1"
        ),
        selected = "none"
      )

```

```{r}
#| panel: fill
plotOutput("race_plot")
```

```{r}
#| context: server
 filtered_data <- reactive({
   adsl <- read_xpt("data/adsl.xpt") %>%
      filter(MMSETOT >= input$mmse_range[1], MMSETOT <= input$mmse_range[2])
  })

output$race_plot <- renderPlot({
    plot_data <- filtered_data()
    
    if (input$stack_var == "none") {
      # Group by Race only for totals
      plot_data <- plot_data %>%
        group_by(RACE) %>%
        summarize(Count = n(), .groups = "drop")
      
      ggplot(plot_data, aes(x = RACE, y = Count)) +
        geom_bar(stat = "identity", fill = "steelblue") +
        labs(
          title = "Counts of Subjects by Race",
          x = "Race",
          y = "Count"
        ) +
        theme_minimal() +
        theme(axis.text.x = element_text(angle = 45, hjust = 1))
    } else {
      # Group by Race and the selected variable for stacking
      plot_data <- plot_data %>%
        group_by(RACE, .data[[input$stack_var]]) %>%
        summarize(Count = n(), .groups = "drop")
      
      ggplot(plot_data, aes(x = RACE, y = Count, fill = .data[[input$stack_var]])) +
        geom_bar(stat = "identity", position = "stack") +
        labs(
          title = paste("Counts of Subjects by Race (Stacked by", input$stack_var, ")"),
          x = "Race",
          y = "Count",
          fill = input$stack_var
        ) +
        theme_minimal() +
        theme(axis.text.x = element_text(angle = 45, hjust = 1))
    }
  })
```

## What is happening across Study Visits(Cumulative Exposure)

```{r}
#| context: setup 
library(shiny)
library(ggplot2)
library(dplyr)
library(haven)

# Read the lab data
adlbc <- read_xpt("data/adlbc.xpt")
```

```{r}
#| panel: sidebar
  selectInput(
        inputId = "param",
        label = "Select Lab Variable (PARAM):",
        choices = unique(adlbc$PARAM),
        selected = unique(adlbc$PARAM)[1]
      )
```

```{r}
#| panel: fill
plotOutput(outputId = "linePlot")
```

```{r}
#| context: server
  output$linePlot <- renderPlot({
    # Filter data based on selected PARAM
    filtered_data <- adlbc %>% filter(PARAM == input$param)
    
    # Summarize data to calculate mean AVAL for each VISIT
    summarized_data <- filtered_data %>%
      group_by(VISIT) %>%
      summarise(mean_AVAL = mean(AVAL, na.rm = TRUE)) %>%
      arrange(VISIT)
    
    # Create the line plot
    ggplot(summarized_data, aes(x = VISIT, y = mean_AVAL)) +
      geom_line(group = 1, color = "blue") +
      geom_point(color = "blue") +
      theme_minimal() +
      labs(
        title = paste("Mean AVAL for", input$param),
        x = "Visit",
        y = "Mean AVAL"
      ) +
      theme(axis.text.x = element_text(angle = 45, hjust = 1))
  })
```

## Relationships of variables (Mixed variable)

## AE

```{r}
#| context: setup 
# Load necessary libraries
library(shiny)
library(random.cdisc.data)
library(dplyr)
library(ggplot2)  # Load viridisLite for a better color palette

# Generate adsl and adae data frames

adsl <- radsl(N = 10, study_duration = 2, seed = 1)

adae <- radae(adsl, seed = 2)

# Check the structure of the datasets to ensure 'TRTEMFL' exists
# str(adsl)
# str(adae)

```

```{r}
#| panel: sidebar
selectInput("dataset", "Choose a dataset:", choices = c("ADSL", "ADAE"))
selectInput("trtemfl", "Choose a TRTEMFL:", choices = c("Y", "N"))
checkboxGroupInput("region1", "REGION1:", choices = c("Asia", "Eurasia", "North America", "South America"), selected = "Asia")
checkboxGroupInput("siteid", "SITEID:", choices = c("BRA-1", "BRA-9", "CHN-11", "CHN-3", "RUS-1", "USA-13"), selected = "BRA-1")
checkboxGroupInput("demographics", "Demographics:", choices = c("Sex", "Race"), selected = c("Sex", "Race"))
```

```{r}
#| panel: fill
plotOutput("barplot")
#h1("Hello World")
```

```{r}
#| context: server
# Define server logic
datasetInput <- reactive({
  switch(input$dataset,
         "ADSL" = adsl,
         "ADAE" = adae)
})

output$barplot <- renderPlot({
  data <- datasetInput()
  if (input$dataset == "ADAE") {
# Filter data based on input selections
    filtered_data <- data %>%
      filter(TRTEMFL == input$trtemfl,
             REGION1 %in% input$region1,
             SITEID %in% input$siteid)
    # Calculate AETERM frequency by ARM
    data_summary <- filtered_data %>%
      group_by(ARM, AETERM) %>%
      summarise(Frequency = n()) %>%
      ungroup()
    # Create bar chart
    ggplot(data_summary, aes(x = AETERM, y = Frequency, fill = ARM)) +

      geom_bar(stat = "identity", position = position_dodge()) +

      labs(title = "Clinical Trial Data", x = "Adverse Event Term (AETERM)", y = "Frequency") +

      theme_minimal()

  } else {
    # If ADSL is selected, show a message
     ggplot() +
      annotate("text", x = 1, y = 1, label = "Select ADAE dataset to view the bar chart", size = 6) +
      theme_void()
  }
})
```
