SYSBP >= 160 & SYSBP < 180 ~ ">=160 and <180",
SYSBP >= 180 ~ ">=180"
)
) %>%
group_by(TRTA) %>%
mutate(total_in_group = n()) %>%
group_by(BP_Category, TRTA) %>%
summarise(
n = n(),
pct = round(100 * n / first(total_in_group), 1),
.groups = "drop"
) %>%
mutate(
`n (%)` = paste0(n, " (", pct, "%)")
) %>%
select(BP_Category, TRTA, `n (%)`) %>%
pivot_wider(names_from = TRTA, values_from = `n (%)`, values_fill = "0 (0%)")
return(advs_summary)
}
# Generate tables for each statistic
tables <- list(
"Min SYSBP" = process_advs_stat(advs, "min"),
"Max SYSBP" = process_advs_stat(advs, "max"),
"Mean SYSBP" = process_advs_stat(advs, "mean"),
"Last SYSBP" = process_advs_stat(advs, "last")
)
# Function to create a flextable for a single table
create_flextable <- function(summary_table, title) {
row_labels <- summary_table$BP_Category
summary_table <- summary_table %>%
select(-BP_Category)  # Remove BP_Category column for the table body
merged_table <- cbind(
`Systolic Blood Pressure (mm Hg)` = row_labels,
summary_table
)
ft <- flextable(merged_table) %>%
set_header_labels(
`Systolic Blood Pressure (mm Hg)` = "Systolic Blood Pressure (mm Hg)"
) %>%
align(j = 2:ncol(merged_table), align = "center", part = "all") %>%
autofit() %>%
set_caption(paste0(title, "\nSource: [include Applicant source, datasets and/or software tools used].\nAbbreviations: N, number of patients in treatment arm with available blood pressure data; n, number of patients with indicated blood pressure.")) %>%
border_remove() %>%
hline_top(part = "header", border = fp_border(width = 1)) %>%
hline_bottom(part = "body", border = fp_border(width = 1)) %>%
hline_bottom(part = "header", border = fp_border(width = 1))
return(ft)
}
# Create flextables for each statistic
flextables <- lapply(names(tables), function(name) {
create_flextable(tables[[name]], name)
})
# Display all tables (example for the first one)
flextables[[1]]
#| echo: false
###Flextable
library(flextable)
library(officer)
library(haven)
advs<- read_xpt("Data/advs.xpt")
# Function to process `advs` dataset for a specific statistic
process_advs_stat <- function(advs, statistic) {
# Filter and calculate the statistic for each subject
advs_summary <- advs %>%
filter(PARAMCD == "SYSBP") %>%
group_by(USUBJID, TRTA) %>%
summarise(
SYSBP = case_when(
statistic == "min" ~ min(AVAL, na.rm = TRUE),
statistic == "max" ~ max(AVAL, na.rm = TRUE),
statistic == "mean" ~ mean(AVAL, na.rm = TRUE),
statistic == "last" ~ last(AVAL[!is.na(AVAL)])
), .groups = "drop"
) %>%
mutate(
BP_Category = case_when(
SYSBP < 90 ~ "<90",
SYSBP >= 90 & SYSBP < 120 ~ ">=90 and <120",
SYSBP >= 120 & SYSBP < 140 ~ ">=120 and <140",
SYSBP >= 140 & SYSBP < 160 ~ ">=140 and <160",
SYSBP >= 160 & SYSBP < 180 ~ ">=160 and <180",
SYSBP >= 180 ~ ">=180"
)
) %>%
group_by(TRTA) %>%
mutate(total_in_group = n()) %>%
group_by(BP_Category, TRTA) %>%
summarise(
n = n(),
pct = round(100 * n / first(total_in_group), 1),
.groups = "drop"
) %>%
mutate(
`n (%)` = paste0(n, " (", pct, "%)")
) %>%
select(BP_Category, TRTA, `n (%)`) %>%
pivot_wider(names_from = TRTA, values_from = `n (%)`, values_fill = "0 (0%)")
return(advs_summary)
}
# Generate tables for each statistic
tables <- list(
"Min SYSBP" = process_advs_stat(advs, "min"),
"Max SYSBP" = process_advs_stat(advs, "max"),
"Mean SYSBP" = process_advs_stat(advs, "mean"),
"Last SYSBP" = process_advs_stat(advs, "last")
)
# Function to create a flextable for a single table
create_flextable <- function(summary_table, title) {
row_labels <- summary_table$BP_Category
summary_table <- summary_table %>%
select(-BP_Category)  # Remove BP_Category column for the table body
merged_table <- cbind(
`Systolic Blood Pressure (mm Hg)` = row_labels,
summary_table
)
ft <- flextable(merged_table) %>%
set_header_labels(
`Systolic Blood Pressure (mm Hg)` = "Systolic Blood Pressure (mm Hg)"
) %>%
align(j = 2:ncol(merged_table), align = "center", part = "all") %>%
autofit() %>%
#set_caption(paste0(title, "\nSource: [include Applicant source, datasets and/or software tools used].\nAbbreviations: N, number of patients in treatment arm with available blood pressure data; n, number of patients with indicated blood pressure.")) %>%
border_remove() %>%
hline_top(part = "header", border = fp_border(width = 1)) %>%
hline_bottom(part = "body", border = fp_border(width = 1)) %>%
hline_bottom(part = "header", border = fp_border(width = 1))
return(ft)
}
# Create flextables for each statistic
flextables <- lapply(names(tables), function(name) {
create_flextable(tables[[name]], name)
})
# Display all tables (example for the first one)
flextables[[1]]
#| echo: false
###Flextable
library(flextable)
library(officer)
library(haven)
advs<- read_xpt("Data/advs.xpt")
# Function to process `advs` dataset for a specific statistic
process_advs_stat <- function(advs, statistic) {
# Filter and calculate the statistic for each subject
advs_summary <- advs %>%
filter(PARAMCD == "SYSBP") %>%
group_by(USUBJID, TRTA) %>%
summarise(
SYSBP = case_when(
statistic == "min" ~ min(AVAL, na.rm = TRUE),
statistic == "max" ~ max(AVAL, na.rm = TRUE),
statistic == "mean" ~ mean(AVAL, na.rm = TRUE),
statistic == "last" ~ last(AVAL[!is.na(AVAL)])
), .groups = "drop"
) %>%
mutate(
BP_Category = case_when(
SYSBP < 90 ~ "<90",
SYSBP >= 90 & SYSBP < 120 ~ ">=90 and <120",
SYSBP >= 120 & SYSBP < 140 ~ ">=120 and <140",
SYSBP >= 140 & SYSBP < 160 ~ ">=140 and <160",
SYSBP >= 160 & SYSBP < 180 ~ ">=160 and <180",
SYSBP >= 180 ~ ">=180"
)
) %>%
group_by(TRTA) %>%
mutate(total_in_group = n()) %>%
group_by(BP_Category, TRTA) %>%
summarise(
n = n(),
pct = round(100 * n / first(total_in_group), 1),
.groups = "drop"
) %>%
mutate(
`n (%)` = paste0(n, " (", pct, "%)")
) %>%
select(BP_Category, TRTA, `n (%)`) %>%
pivot_wider(names_from = TRTA, values_from = `n (%)`, values_fill = "0 (0%)")
return(advs_summary)
}
# Generate tables for each statistic
tables <- list(
"Min SYSBP" = process_advs_stat(advs, "min"),
"Max SYSBP" = process_advs_stat(advs, "max"),
"Mean SYSBP" = process_advs_stat(advs, "mean"),
"Last SYSBP" = process_advs_stat(advs, "last")
)
# Function to create a flextable for a single table
create_flextable <- function(summary_table, title) {
row_labels <- summary_table$BP_Category
summary_table <- summary_table %>%
select(-BP_Category)  # Remove BP_Category column for the table body
merged_table <- cbind(
`Systolic Blood Pressure (mm Hg)` = row_labels,
summary_table
)
ft <- flextable(merged_table) %>%
set_header_labels(
`Systolic Blood Pressure (mm Hg)` = "Systolic Blood Pressure (mm Hg)"
) %>%
align(j = 2:ncol(merged_table), align = "center", part = "all") %>%
autofit() %>%
set_caption(paste0(title, "\nSource:")) %>%
border_remove() %>%
hline_top(part = "header", border = fp_border(width = 1)) %>%
hline_bottom(part = "body", border = fp_border(width = 1)) %>%
hline_bottom(part = "header", border = fp_border(width = 1))
return(ft)
}
# Create flextables for each statistic
flextables <- lapply(names(tables), function(name) {
create_flextable(tables[[name]], name)
})
# Display all tables (example for the first one)
flextables[[1]]
#| echo: false
###Flextable
library(flextable)
library(officer)
library(haven)
library(dplyr)
library(tidyr)
advs<- read_xpt("Data/advs.xpt")
# Function to process `advs` dataset for a specific statistic
process_advs_stat <- function(advs, statistic) {
# Filter and calculate the statistic for each subject
advs_summary <- advs %>%
filter(PARAMCD == "SYSBP") %>%
group_by(USUBJID, TRTA) %>%
summarise(
SYSBP = case_when(
statistic == "min" ~ min(AVAL, na.rm = TRUE),
statistic == "max" ~ max(AVAL, na.rm = TRUE),
statistic == "mean" ~ mean(AVAL, na.rm = TRUE),
statistic == "last" ~ last(AVAL[!is.na(AVAL)])
), .groups = "drop"
) %>%
mutate(
BP_Category = case_when(
SYSBP < 90 ~ "<90",
SYSBP >= 90 & SYSBP < 120 ~ ">=90 and <120",
SYSBP >= 120 & SYSBP < 140 ~ ">=120 and <140",
SYSBP >= 140 & SYSBP < 160 ~ ">=140 and <160",
SYSBP >= 160 & SYSBP < 180 ~ ">=160 and <180",
SYSBP >= 180 ~ ">=180"
)
) %>%
group_by(TRTA) %>%
mutate(total_in_group = n()) %>%
group_by(BP_Category, TRTA) %>%
summarise(
n = n(),
pct = round(100 * n / first(total_in_group), 1),
.groups = "drop"
) %>%
mutate(
`n (%)` = paste0(n, " (", pct, "%)")
) %>%
select(BP_Category, TRTA, `n (%)`) %>%
pivot_wider(names_from = TRTA, values_from = `n (%)`, values_fill = "0 (0%)")
return(advs_summary)
}
# Generate tables for each statistic
tables <- list(
"Min SYSBP" = process_advs_stat(advs, "min"),
"Max SYSBP" = process_advs_stat(advs, "max"),
"Mean SYSBP" = process_advs_stat(advs, "mean"),
"Last SYSBP" = process_advs_stat(advs, "last")
)
# Function to create a flextable for a single table
create_flextable <- function(summary_table, title) {
row_labels <- summary_table$BP_Category
summary_table <- summary_table %>%
select(-BP_Category)  # Remove BP_Category column for the table body
merged_table <- cbind(
`Systolic Blood Pressure (mm Hg)` = row_labels,
summary_table
)
ft <- flextable(merged_table) %>%
set_header_labels(
`Systolic Blood Pressure (mm Hg)` = "Systolic Blood Pressure (mm Hg)"
) %>%
align(j = 2:ncol(merged_table), align = "center", part = "all") %>%
autofit() %>%
set_caption(paste0(title, "\n:")) %>%
border_remove() %>%
hline_top(part = "header", border = fp_border(width = 1)) %>%
hline_bottom(part = "body", border = fp_border(width = 1)) %>%
hline_bottom(part = "header", border = fp_border(width = 1))
return(ft)
}
# Create flextables for each statistic
flextables <- lapply(names(tables), function(name) {
create_flextable(tables[[name]], name)
})
# Display all tables (example for the first one)
flextables[[1]]
# Function to process `advs` dataset for a specific statistic
process_advs_stat <- function(advs, statistic) {
# Filter and calculate the statistic for each subject
advs_summary <- advs %>%
filter(PARAMCD == "SYSBP") %>%
group_by(USUBJID, TRTA) %>%
summarise(
SYSBP = case_when(
statistic == "min" ~ min(AVAL, na.rm = TRUE),
statistic == "max" ~ max(AVAL, na.rm = TRUE),
statistic == "mean" ~ mean(AVAL, na.rm = TRUE),
statistic == "last" ~ last(AVAL[!is.na(AVAL)])
), .groups = "drop"
) %>%
mutate(
BP_Category = case_when(
SYSBP < 90 ~ "<90",
SYSBP >= 90 & SYSBP < 120 ~ ">=90 and <120",
SYSBP >= 120 & SYSBP < 140 ~ ">=120 and <140",
SYSBP >= 140 & SYSBP < 160 ~ ">=140 and <160",
SYSBP >= 160 & SYSBP < 180 ~ ">=160 and <180",
SYSBP >= 180 ~ ">=180"
)
) %>%
group_by(TRTA) %>%
mutate(total_in_group = n()) %>%
group_by(BP_Category, TRTA) %>%
summarise(
n = n(),
pct = round(100 * n / first(total_in_group), 1),
.groups = "drop"
) %>%
mutate(
`n (%)` = paste0(n, " (", pct, "%)")
) %>%
select(BP_Category, TRTA, `n (%)`) %>%
pivot_wider(names_from = TRTA, values_from = `n (%)`, values_fill = "0 (0%)")
return(advs_summary)
}
# Generate tables for each statistic
tables <- list(
"Min SYSBP" = process_advs_stat(advs, "min"),
"Max SYSBP" = process_advs_stat(advs, "max"),
"Mean SYSBP" = process_advs_stat(advs, "mean"),
"Last SYSBP" = process_advs_stat(advs, "last")
)
# Function to create a flextable for a single table with a dynamic header title
create_flextable <- function(summary_table, title) {
row_labels <- summary_table$BP_Category
summary_table <- summary_table %>%
select(-BP_Category)  # Remove BP_Category column for the table body
# Combine row labels into the main table
merged_table <- cbind(
`Systolic Blood Pressure (mm Hg)` = row_labels,
summary_table
)
# Dynamically rename the first column header
ft <- flextable(merged_table) %>%
set_header_labels(
`Systolic Blood Pressure (mm Hg)` = title
) %>%
align(j = 2:ncol(merged_table), align = "center", part = "all") %>%
autofit() %>%
set_caption(paste0(title, ":\n")) %>%
border_remove() %>%
hline_top(part = "header", border = fp_border(width = 1)) %>%
hline_bottom(part = "body", border = fp_border(width = 1)) %>%
hline_bottom(part = "header", border = fp_border(width = 1))
return(ft)
}
# Create flextables with specific headers for each statistic
flextables <- list(
create_flextable(tables[["Min SYSBP"]], "Min Systolic Blood Pressure (mm Hg)"),
create_flextable(tables[["Max SYSBP"]], "Max Systolic Blood Pressure (mm Hg)"),
create_flextable(tables[["Mean SYSBP"]], "Mean Systolic Blood Pressure (mm Hg)"),
create_flextable(tables[["Last SYSBP"]], "Last Systolic Blood Pressure (mm Hg)")
)
# Display all tables (example for the first one)
flextables[[1]]
library(dplyr)
library(flextable)
library(haven)
adae <- read_xpt("Data/adae.xpt")
# Assuming your data is loaded in a data frame named `adae`
summary_table <- adae %>%
group_by(AEBODSYS, TRTA, AESEV, AGEGR1) %>%
summarise(N = n(), .groups = "drop")
# Create a flextable
flex_table <- flextable(summary_table) %>%
merge_v(j = "AEBODSYS") %>%
merge_v(j = "TRTA") %>%
merge_v(j = "AESEV") %>%
set_header_labels(
AEBODSYS = "AE Body System",
TRTA = "Treatment Arm",
AESEV = "AE Severity",
AGEGR1 = "Age Group",
N = "Count"
) %>%
autofit()
# Print the flextable
flex_table
library(dplyr)
library(flextable)
library(haven)
adae <- read_xpt("Data/adae.xpt")
# Assuming your data is loaded in a data frame named `adae`
summary_table <- adae %>%
group_by(AEBODSYS, TRTA, AESEV, AGEGR1) %>%
filter(AEBODSYS =="GENERAL DISORDERS AND ADMINISTRATION SITE CONDITIONS" |
"NERVOUS SYSTEM DISORDERS" |
"SKIN AND SUBCUTANEOUS TISSUE DISORDERS")
library(dplyr)
library(flextable)
library(haven)
adae <- read_xpt("Data/adae.xpt")
# Assuming your data is loaded in a data frame named `adae`
summary_table <- adae %>%
filter(
AEBODSYS %in% c(
"GENERAL DISORDERS AND ADMINISTRATION SITE CONDITIONS",
"NERVOUS SYSTEM DISORDERS",
"SKIN AND SUBCUTANEOUS TISSUE DISORDERS"
)
) %>%
group_by(AEBODSYS, TRTA, AESEV, AGEGR1) %>%
summarise(N = n(), .groups = "drop")
# Create a flextable
flex_table <- flextable(summary_table) %>%
merge_v(j = "AEBODSYS") %>%
merge_v(j = "TRTA") %>%
merge_v(j = "AESEV") %>%
set_header_labels(
AEBODSYS = "AE Body System",
TRTA = "Treatment Arm",
AESEV = "AE Severity",
AGEGR1 = "Age Group",
N = "Count"
) %>%
autofit()
# Print the flextable
flex_table
library(dplyr)
library(flextable)
library(haven)
adae <- read_xpt("Data/adae.xpt")
# Assuming your data is loaded in a data frame named `adae`
summary_table <- adae %>%
filter(
AEBODSYS %in% c(
"GENERAL DISORDERS AND ADMINISTRATION SITE CONDITIONS",
"NERVOUS SYSTEM DISORDERS",
"SKIN AND SUBCUTANEOUS TISSUE DISORDERS"
)
) %>%
group_by(AEBODSYS, TRTA, AESEV, AGEGR1) %>%
summarise(N = n(), .groups = "drop")
# Create a flextable with AEBODSYS at the top and merged rows
flex_table <- flextable(summary_table) %>%
merge_v(j = "AEBODSYS") %>%  # Merge the AE Body System column
set_header_labels(
AEBODSYS = "AE Body System",
TRTA = "Treatment Arm",
AESEV = "AE Severity",
AGEGR1 = "Age Group",
N = "Count"
) %>%
theme_box() %>%             # Apply a simple boxed theme
autofit()                   # Automatically adjust column widths
# Print the flextable
flex_table
rsconnect::setAccountInfo(name = 'ygw098-chris-smith',
token = 'BB0C0C7BE8F888483FE83DF9C7085F00',
secret = 'Qjs2e2Z1ZAYFqC0TVz0yf409licU1yDYi2/iV4H3',
server = 'posit.cloud')
## AE magnitudes {.smaller .scrollable transition="slide"}
rsconnect::setAccountInfo(name = 'ygw098-chris-smith',
::: panel-tabset
-   What can barcharts tell us
-   What can barcharts tell us
rsconnect::setAccountInfo(name = 'ygw098-chris-smith'),
rsconnect::setAccountInfo
rsconnect::setAccountInfo(name = 'ygw098-chris-smith',
token = 'BB0C0C7BE8F888483FE83DF9C7085F00',
secret = 'Qjs2e2Z1ZAYFqC0TVz0yf409licU1yDYi2/iV4H3',
server = 'posit.cloud')
install.packages("curl", type = "source")
rsconnect::setAccountInfo(name = 'ygw098-chris-smith',
token = 'BB0C0C7BE8F888483FE83DF9C7085F00',
secret = 'Qjs2e2Z1ZAYFqC0TVz0yf409licU1yDYi2/iV4H3',
server = 'posit.cloud')
system("curl --version")
```{r}
rsconnect::setAccountInfo(name = 'ygw098-chris-smith',
token = 'D975A407E6EA76E59435F845EA304415',
secret = 'vfgP0VGzW2XhpZUJkXay7MwENwcuJseJLmmFr76I',
server = 'posit.cloud')
rsconnect::setAccountInfo(name = 'ygw098-chris-smith',
token = 'D975A407E6EA76E59435F845EA304415',
secret = 'vfgP0VGzW2XhpZUJkXay7MwENwcuJseJLmmFr76I',
server = 'posit.cloud')
system("curl --version")
system("curl --version")
rsconnect::setAccountInfo(name = 'ygw098-chris-smith',
token = 'D975A407E6EA76E59435F845EA304415',
secret = 'vfgP0VGzW2XhpZUJkXay7MwENwcuJseJLmmFr76I',
server = 'posit.cloud')
rsconnect::setAccountInfo(name = 'ygw098-chris-smith',
token = 'D975A407E6EA76E59435F845EA304415',
secret = 'vfgP0VGzW2XhpZUJkXay7MwENwcuJseJLmmFr76I',
server = 'posit.cloud')
rsconnect::writeManifest()
install.packages('rsconnect')
Which age group has higher instances of adverse events that affect the skin and subcutaneous tissue. Are those events higher in the high dose, low dose or placebo arm.
rlang::last_trace()
install.packages("quarto")
